
        <!-- Firebase SDKs: PLACE THESE BEFORE YOUR SCRIPT -->
<script type="module">
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.0.0/firebase-app.js";
import {
  getAuth,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  onAuthStateChanged,
  signOut,
} from "https://www.gstatic.com/firebasejs/10.0.0/firebase-auth.js";

window.addEventListener('DOMContentLoaded', () => {
  let currentUserId = null;

  // --- Firebase Setup ---
  const firebaseConfig = {
    apiKey: "",
    authDomain: "easy-speech-aac.firebaseapp.com",
    projectId: "easy-speech-aac",
    storageBucket: "easy-speech-aac.appspot.com",
    messagingSenderId: "",
    appId: ""
  };
  const app = initializeApp(firebaseConfig);
  const auth = getAuth(app);

// Always sign out on page load (for demo/testing)
signOut(auth).catch(() => {});

  // --- Cached DOM Elements ---
  const loginSection = document.getElementById("login-section");
  const userContent = document.getElementById("user-content");
  const appSection = document.getElementById("app-section");
  const welcomeSection = document.getElementById("welcome-section");
  const userRoleDisplay = document.getElementById("user-role-display");
  const userNameDisplay = document.getElementById("user-name-display");

  const emailInput = document.getElementById("email");
  const passwordInput = document.getElementById("password");
  const roleSelect = document.getElementById("role-select");
  const signupBtn = document.getElementById("signup-btn");
  const loginBtn = document.getElementById("login-btn");
  const logoutBtn = document.getElementById("logout-btn");

  const tabButtons = document.querySelectorAll('.tab-btn');
  const tabContents = document.querySelectorAll('.tab-content');

  const phraseTypes = ["want", "need", "feel"];
  const favoritesListElem = document.getElementById("favorites-list");
const themeToggle = document.getElementById('themeToggle');
const themeLabel = document.getElementById('themeLabel');

// --- Tab click handling ---
function setupTabs() {
  const tabButtons = document.querySelectorAll('button[data-tab]');
  const tabContents = document.querySelectorAll('.tab-content');

  tabButtons.forEach(btn => {
      btn.addEventListener('click', () => {
      // Hide all contents
      tabContents.forEach(c => (c.style.display = 'none'));
      tabButtons.forEach(b => b.classList.remove('active'));

      // Show selected
      const target = document.getElementById(btn.dataset.tab);
      if (target) target.style.display = 'block';
      btn.classList.add('active');
    });
  });
}

// --- Auth state handling ---
onAuthStateChanged(auth, user => {
  if (user) {
    currentUserId = user.uid;
    const role = localStorage.getItem(`${currentUserId}_userRole`) || "user";
    
    userRoleDisplay.textContent = role;
    
    loginSection.style.display = 'none';
    userContent.style.display = 'block';
    appSection.style.display = 'block';
    welcomeSection.style.display = 'block';

    setupTabs();
  } else {
    currentUserId = null;
    loginSection.style.display = 'block';
    userContent.style.display = 'none';
    appSection.style.display = 'none';
    welcomeSection.style.display = 'none';
  }
});

// Load saved theme on page load
let savedTheme = localStorage.getItem(`theme_${currentUserId}`) || 'light';
document.body.classList.add(`${savedTheme}-theme`);
themeToggle.checked = savedTheme === 'dark';
themeLabel.textContent = savedTheme === 'dark' ? 'Dark Mode' : 'Light Mode';

// Toggle theme function
themeToggle.addEventListener('change', () => {
    if (themeToggle.checked) {
        document.body.classList.remove('light-theme');
        document.body.classList.add('dark-theme');
        themeLabel.textContent = 'Dark Mode';
        localStorage.setItem(`theme_${currentUserId}`, 'dark');
    } else {
        document.body.classList.remove('dark-theme');
        document.body.classList.add('light-theme');
        themeLabel.textContent = 'Light Mode';
        localStorage.setItem(`theme_${currentUserId}`, 'light');
    }
});

//user-specific variable
let points = 0;
let exp = 0;
let level = 1;

// Helper functions to save/load user-specific data in localStorage
function getUserKey(key) {
  const currentUserId = 'defaultUser';
  return `${currentUserId}_${key}`;
}

function saveUserData(key, data) {
  if (!currentUserId) return;
  localStorage.setItem(`${currentUserId}_${key}`, JSON.stringify(data));
}

function loadUserData(key) {
  if (!currentUserId) return null;
  const data = localStorage.getItem(`${currentUserId}_${key}`);
  return data ? JSON.parse(data) : null;
}

function saveUserRole(role) {
  if (!currentUserId) return;
  localStorage.setItem(`${currentUserId}_userRole`, role);
}

function loadUserRole() {
  if (!currentUserId) return 'user';
  return localStorage.getItem(`${currentUserId}_userRole`) || 'user';
}

function removeUserRole() {
  if (!currentUserId) return;
  localStorage.removeItem(`${currentUserId}_userRole`);
}

// Speech synthesis helper
  function speakText(text) {
    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(text);
      window.speechSynthesis.speak(utterance);
    } else {
      alert('Sorry, your browser does not support speech synthesis.');
    }
  }

