
// --- Sentence Builder Game ---
const SENTENCES = [
  { words: ["The", "dog", "runs"], correct: "The dog runs", prompt: "Drag the words to form the sentence that describes what the dog is doing." },
  { words: ["The", "cat", "sleeps"], correct: "The cat sleeps", prompt: "Arrange the words to show what the cat is doing." },
  { words: ["The", "bird", "flies"], correct: "The bird flies", prompt: "Put the words in order to say what the bird does." },
  { words: ["The", "fish", "swims"], correct: "The fish swims", prompt: "Build the sentence that tells what the fish is doing." },
  { words: ["The", "cow", "eats", "grass"], correct: "The cow eats grass", prompt: "Drag the words to form the sentence about the cow eating." },
  { words: ["I", "eat", "pizza"], correct: "I eat pizza", prompt: "Arrange the words to say what you are eating." },
  { words: ["I", "drink", "milk"], correct: "I drink milk", prompt: "Put the words in order to show what you are drinking." },
  { words: ["She", "eats", "an", "apple"], correct: "She eats an apple", prompt: "Drag the words to form the sentence about what she eats." },
  { words: ["He", "drinks", "water"], correct: "He drinks water", prompt: "Arrange the words to describe what he is drinking." },
  { words: ["We", "eat", "bread"], correct: "We eat bread", prompt: "Build the sentence showing what we eat." },
  { words: ["Mom", "is", "happy"], correct: "Mom is happy", prompt: "Drag the words to say how Mom feels." },
  { words: ["Dad", "is", "tired"], correct: "Dad is tired", prompt: "Arrange the words to show Dad’s feeling." },
  { words: ["The", "sister", "plays"], correct: "The sister plays", prompt: "Put the words in order to describe what the sister does." },
  { words: ["The", "brother", "jumps"], correct: "The brother jumps", prompt: "Build the sentence that tells what the brother is doing." },
  { words: ["The", "baby", "sleeps"], correct: "The baby sleeps", prompt: "Drag the words to say what the baby is doing." },
  { words: ["I", "read", "a", "book"], correct: "I read a book", prompt: "Arrange the words to form the sentence about reading." },
  { words: ["I", "play", "with", "the", "ball"], correct: "I play with the ball", prompt: "Put the words in order to say what you are playing with." },
  { words: ["The", "car", "is", "red"], correct: "The car is red", prompt: "Drag the words to form the sentence describing the car." },
  { words: ["The", "chair", "is", "big"], correct: "The chair is big", prompt: "Arrange the words to say something about the chair." },
  { words: ["I", "wear", "a", "hat"], correct: "I wear a hat", prompt: "Build the sentence that tells what you wear." },
  { words: ["I", "am", "happy"], correct: "I am happy", prompt: "Drag the words to say how you feel." },
  { words: ["I", "am", "sad"], correct: "I am sad", prompt: "Arrange the words to show your feeling." },
  { words: ["She", "is", "excited"], correct: "She is excited", prompt: "Put the words in order to describe how she feels." },
  { words: ["He", "is", "scared"], correct: "He is scared", prompt: "Build the sentence about his feeling." },
  { words: ["We", "are", "tired"], correct: "We are tired", prompt: "Drag the words to form the sentence about how we feel." },
  { words: ["The", "rabbit", "hops"], correct: "The rabbit hops", prompt: "Describe what the rabbit is doing." },
  { words: ["The", "frog", "jumps"], correct: "The frog jumps", prompt: "What action does the frog take?" },
  { words: ["The", "squirrel", "climbs", "the", "tree"], correct: "The squirrel climbs the tree", prompt: "Where does the squirrel go?" },
  { words: ["The", "butterfly", "lands", "on", "the", "flower"], correct: "The butterfly lands on the flower", prompt: "What is the butterfly doing?" },
  { words: ["The", "bee", "collects", "nectar"], correct: "The bee collects nectar", prompt: "What does the bee get from the flower?" },
  { words: ["I", "eat", "strawberries"], correct: "I eat strawberries", prompt: "What fruit are you eating?" },
  { words: ["She", "drinks", "orange", "juice"], correct: "She drinks orange juice", prompt: "What is she drinking?" },
  { words: ["He", "likes", "chocolate"], correct: "He likes chocolate", prompt: "What sweet treat does he enjoy?" },
  { words: ["We", "bake", "a", "cake"], correct: "We bake a cake", prompt: "What are we making in the oven?" },
  { words: ["They", "eat", "sandwiches"], correct: "They eat sandwiches", prompt: "What are they having for lunch?" },
  { words: ["The", "teacher", "writes", "on", "the", "board"], correct: "The teacher writes on the board", prompt: "What is the teacher doing?" },
  { words: ["My", "friend", "sings", "a", "song"], correct: "My friend sings a song", prompt: "What is your friend doing?" },
  { words: ["The", "doctor", "helps", "the", "patient"], correct: "The doctor helps the patient", prompt: "How does a doctor help people?" },
  { words: ["The", "baby", "laughs", "loudly"], correct: "The baby laughs loudly", prompt: "What sound is the baby making?" },
  { words: ["Grandpa", "reads", "the", "newspaper"], correct: "Grandpa reads the newspaper", prompt: "What is Grandpa reading?" },
  { words: ["I", "open", "the", "door"], correct: "I open the door", prompt: "How do you enter a room?" },
  { words: ["She", "closes", "the", "window"], correct: "She closes the window", prompt: "What does she do when it's cold?" },
  { words: ["He", "paints", "a", "picture"], correct: "He paints a picture", prompt: "What is he creating with colors?" },
  { words: ["We", "ride", "the", "bicycle"], correct: "We ride the bicycle", prompt: "How do we travel on two wheels?" },
  { words: ["They", "build", "a", "tower"], correct: "They build a tower", prompt: "What are they making with blocks?" },
  { words: ["I", "feel", "sleepy"], correct: "I feel sleepy", prompt: "How do you feel before bed?" },
  { words: ["She", "feels", "surprised"], correct: "She feels surprised", prompt: "How does she feel when something unexpected happens?" },
  { words: ["He", "feels", "proud"], correct: "He feels proud", prompt: "How does he feel after winning?" },
  { words: ["We", "feel", "nervous"], correct: "We feel nervous", prompt: "How do we feel before a test?" },
  { words: ["They", "feel", "excited"], correct: "They feel excited", prompt: "How do they feel on their birthday?" },
  { words: ["Please", "sit", "here"], correct: "Please sit here", prompt: "Where should you ask someone to sit?" },
  { words: ["Can", "I", "have", "a", "pencil?"], correct: "Can I have a pencil?", prompt: "How do you ask for a pencil?" },
  { words: ["I", "like", "this", "game"], correct: "I like this game", prompt: "What do you say if you enjoy the game?" },
  { words: ["Let’s", "play", "together"], correct: "Let’s play together", prompt: "What can you say to ask someone to play?" },
  { words: ["Don’t", "touch", "that"], correct: "Don’t touch that", prompt: "What do you say when you don't want someone to touch something?" },
];


// ----- LocalStorage Keys -----
const xpKey = "sentence_xp";
const levelKey = "sentence_level";
const winsKey = "sentence_wins";

let shuffled = [];
let currentIndex = 0;

// ----- DOM Elements -----
const wordBank = document.getElementById("word-bank");
const sentenceArea = document.getElementById("sentence-area");
const checkBtn = document.getElementById("check-sentence");
const feedbackDiv = document.getElementById("feedback");
const sentencePrompt = document.getElementById("sentence-prompt");
const winsDisplay = document.getElementById("wins");

// New progress bar elements
const progressBar = document.getElementById("gameProgressBar");
const progressText = document.getElementById("gameProgressText");
const pointsDisplay = document.getElementById("gamePointsDisplay");
const levelDisplay = document.getElementById("gameLevelDisplay");
const progressCounter = document.getElementById("sentence-progress");

// ----- Helpers -----
function shuffleArray(array){ return array.slice().sort(()=>Math.random()-0.5); }
function saveLS(key, value){ localStorage.setItem(key, JSON.stringify(value)); }
function loadLS(key, def){ return JSON.parse(localStorage.getItem(key)||JSON.stringify(def)); }

// ----- Load State -----
let gamePoints = loadLS(xpKey, 0);
let gameLevel = loadLS(levelKey, 1);
let gameWins = loadLS(winsKey, 0);

// ----- Update Progress (planner-style) -----
function updateProgress() {
    const expForNext = gameLevel * 100;
    const currentExp = gamePoints - (gameLevel - 1) * 100;
    const percent = Math.min(100, (currentExp / expForNext) * 100);

    // Progress bar width and text
    progressBar.style.width = percent + '%';
    progressText.textContent = currentExp + ' XP';

    // Points & level displays
    pointsDisplay.textContent = `⭐ Points: ${gamePoints}`;
    levelDisplay.textContent = `🎯 Level: ${gameLevel}`;

    // Level up if necessary
    if(gamePoints >= gameLevel * 100){
        gameLevel++;
        saveLS(levelKey, gameLevel);
    }
}
// ----- Progress Counter -----
function updateSentenceCounter() {
    const total = SENTENCES.length;
    const answered = Math.min(currentIndex, total);
    const counterElem = document.getElementById("sentence-progress");
    if (!counterElem) return;
    counterElem.textContent = `Sentence ${answered} / ${total}`;
}

const TOTAL_SENTENCES_PER_GAME = 7; // Number of sentences per session
// ----- Load Sentence -----
function loadSentence() {
    // If shuffled set is empty or game finished
    if (shuffled.length === 0 || currentIndex >= shuffled.length) {
        // Pick 7 random sentences from full list
        shuffled = shuffleArray(SENTENCES).slice(0, TOTAL_SENTENCES_PER_GAME);
        currentIndex = 0;
        if (gameWinsDisplay) gameWinsDisplay.textContent = gameWins;
    }

    const s = shuffled[currentIndex];
    sentencePrompt.textContent = s.prompt;

    // Clear sentence area
    sentenceArea.innerHTML = "";
    sentenceArea.style.minHeight = "80px";
    sentenceArea.style.border = "2px dashed #4CAF50";
    sentenceArea.style.borderRadius = "8px";
    sentenceArea.style.padding = "12px";
    sentenceArea.style.marginBottom = "12px";
    sentenceArea.style.display = "flex";
    sentenceArea.style.flexWrap = "wrap";
    sentenceArea.style.gap = "8px";
    feedbackDiv.innerHTML = "";

    // Populate word bank
    wordBank.innerHTML = "";
    wordBank.style.display = "flex";
    wordBank.style.flexWrap = "wrap";
    wordBank.style.justifyContent = "center";
    shuffleArray(s.words).forEach(word => wordBank.appendChild(makeWordElement(word)));

    // Update progress counter
    updateSentenceCounter();
}
// ----- Update Progress Counter -----
function updateSentenceCounter() {
    const total = TOTAL_SENTENCES_PER_GAME;
    const answered = Math.min(currentIndex, total);
    progressCounter.textContent = `Sentence ${answered} / ${total}`;
}

// ----- Drag & Drop -----
function makeWordElement(word) {
    const span = document.createElement("span");
    span.className = "word";
    span.draggable = true;
    span.textContent = word;
    span.style.fontSize = "1.5em";          // Bigger font
    span.style.padding = "8px 12px";        // More clickable area
    span.style.margin = "4px";
    span.style.border = "1px solid #4CAF50";
    span.style.borderRadius = "6px";
    span.style.background = "#e0f7fa";
    span.style.cursor = "grab";

    // Drag events
    span.addEventListener("dragstart", e => e.dataTransfer.setData("text", word));
    span.addEventListener("dragend", () => span.style.opacity = "1");
    return span;
}

// Populate word bank
function loadSentence(){
    if(shuffled.length === 0) shuffled = shuffleArray(SENTENCES);
    if(currentIndex >= shuffled.length){
        gameWins++;
        saveLS(winsKey, gameWins);
        currentIndex = 0;
        shuffled = shuffleArray(SENTENCES);
    }

    const s = shuffled[currentIndex];
    sentencePrompt.textContent = s.prompt;

    sentenceArea.innerHTML = "";  // clear area for rerange
    sentenceArea.style.minHeight = "80px"; // make it bigger
    sentenceArea.style.border = "2px dashed #4CAF50";
    sentenceArea.style.borderRadius = "8px";
    sentenceArea.style.padding = "12px";
    sentenceArea.style.marginBottom = "12px";
    sentenceArea.style.display = "flex";
    sentenceArea.style.flexWrap = "wrap";
    sentenceArea.style.gap = "8px";
    feedbackDiv.innerHTML = "";

    wordBank.innerHTML = "";
    wordBank.style.display = "flex";
    wordBank.style.flexWrap = "wrap";
    wordBank.style.justifyContent = "center";
    shuffleArray(s.words).forEach(word => wordBank.appendChild(makeWordElement(word)));
}

// Make sentence area sortable by dragging
sentenceArea.addEventListener("dragover", e => e.preventDefault());
sentenceArea.addEventListener("drop", e => {
    e.preventDefault();
    const word = e.dataTransfer.getData("text");
    const span = makeWordElement(word);

    // Allow removing/rearranging
    span.addEventListener("dblclick", () => {
        sentenceArea.removeChild(span);      // remove on double click
        wordBank.appendChild(makeWordElement(word)); // return to word bank
    });

    sentenceArea.appendChild(span);
});

// Enable rearranging inside sentence area
sentenceArea.addEventListener("dragstart", e => {
    if(e.target.className === "word") {
        e.dataTransfer.setData("text", e.target.textContent.trim());
        e.target.remove(); // remove so it can be dropped elsewhere
    }
});

// ----- Check Sentence -----
checkBtn.addEventListener("click", () => {
    const s = shuffled[currentIndex];
    const builtSentence = Array.from(sentenceArea.childNodes)
        .map(n => n.textContent.trim())
        .join(" ")
        .trim();

    if (builtSentence === s.correct) {
        // Correct
        feedbackDiv.innerHTML = '<div class="alert alert-correct">✅ Correct! +20 XP</div>';
        gamePoints += 20;
        saveLS(xpKey, gamePoints);

        currentIndex++;

        if (currentIndex >= TOTAL_SENTENCES_PER_GAME) {
            // Finished 7 sentences — increment wins
            gameWins++;
            saveLS(winsKey, gameWins);
            winsDisplay.textContent = gameWins;

            progressCounter.textContent = `🎉 Congratulations! You completed this set of sentences!`;

            setTimeout(() => {
                currentIndex = 0;
                shuffled = shuffleArray(SENTENCES).slice(0, TOTAL_SENTENCES_PER_GAME);
                loadSentence();
            }, 2000);
        } else {
            updateSentenceCounter();
            setTimeout(loadSentence, 1000);
        }
    } else {
        // Wrong
        feedbackDiv.innerHTML = '<div class="alert alert-wrong">❌ Try Again! -10 XP</div>';
        gamePoints = Math.max(0, gamePoints - 10);
        saveLS(xpKey, gamePoints);
    }

    updateProgress();
});

// ----- Initialize -----
winsDisplay.textContent = gameWins;  
updateProgress();
loadSentence();
